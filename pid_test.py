import RPi.GPIO as GPIO
from MCP3008 import MCP3008  # adafruit_python_gpio dependency
from PCA9685 import PCA9685  # adafruit_python_gpio dependency
from PID import PID
from open_myo import open_myo as myo
import traceback

GPIO.setmode(GPIO.BCM)

""" Motor paramters and initialization"""
MOTOR_CTRL_MAX = 4095  # PWM resolution = 12 bit
MOT_0_PWM = 0
MOT_0_A_CTRL = 20
MOT_0_B_CTRL = 21
GPIO.setup(MOT_0_A_CTRL, GPIO.OUT)
GPIO.setup(MOT_0_B_CTRL, GPIO.OUT)
MPOT_0 = 1
pwm = PCA9685.PCA9685()
pwm.set_pwm_freq(60)

""" Software SPI configuration for the MCP3008: """
CLK  = 18
MISO = 23
MOSI = 24
CS   = 25
adc = MCP3008.MCP3008(clk=CLK, cs=CS, miso=MISO, mosi=MOSI)

""" PID parameters and initialization"""
PID_KP = 6
PID_KI = 0
PID_KD = 0
pid = PID.PID(PID_KP, PID_KI, PID_KD)
pid.setWindup = MOTOR_CTRL_MAX
pid.setSampleTime = 0.2
pid.SetPoint = 800;

def motor_control(duty_cycle):
    if(duty_cycle > MOTOR_CTRL_MAX):
        duty_cycle = MOTOR_CTRL_MAX
    elif(duty_cycle < -MOTOR_CTRL_MAX):
        duty_cycle = -MOTOR_CTRL_MAX
    if(duty_cycle >= 0):
        pwm.set_pwm(MOT_0_PWM, 0, duty_cycle)  # set motor speed
        GPIO.output(MOT_0_A_CTRL, GPIO.LOW)  # set pin LOW
        GPIO.output(MOT_0_B_CTRL, GPIO.HIGH)  # set pin HIGH
    else:
        pwm.set_pwm(MOT_0_PWM, 0, abs(duty_cycle))  # set motor speed
        GPIO.output(MOT_0_A_CTRL, GPIO.HIGH)  # set pin HIGH
        GPIO.output(MOT_0_B_CTRL, GPIO.LOW)  # set pin LOW

def main():
    """ With these three lines of code, the control of a single motor is achieved.
    First the feedback value of the controller is obtained from a specific channel
    of the ADC IC. Then, the control signal is computed with a PID. Finally, the
    control signal is applied to the motor as a PWM signal generated by the PWM IC.
    """
    feedback = adc.read_adc(MPOT_0)
    pid.update(feedback)
    print(pid.output)
    motor_control(int(pid.output))

while(True):
    try:
        main()
    except Exception as err:
        GPIO.cleanup()
        traceback.print_exc()
        break
